"""–ù–∞–ø–∏—à—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
 –∑ –¥–≤–æ—Ö –ª–∞–Ω—Ü—é–≥—ñ–≤:
 ÔÇ∑ –ü–µ—Ä—à–∏–π –ª–∞–Ω—Ü—é–≥ –æ—Ç—Ä–∏–º—É—î –º–µ—Ç—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è(—Å—Ö—É–¥–Ω–µ–Ω–Ω—è, –Ω–∞–±—ñ—Ä –º‚Äô—è–∑—ñ–≤, —Ç–æ—â–æ)
 —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤
 ÔÇ∑ –î—Ä—É–≥–∏–π –ª–∞–Ω—Ü—é–≥ –æ—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤,
 —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞(–Ω–∏–∑—å–∫–∏–π, —Å–µ—Ä–µ–¥–Ω—ñ–π, –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª)
 —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Å—É –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å(–≤ –≥–æ–¥–∏–Ω–∞—Ö) —ñ
 –ø–æ–≤–µ—Ä—Ç–∞—î –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å """

import dotenv
import warnings

from langchain_huggingface import HuggingFaceEndpoint
from langchain.prompts import PromptTemplate
from langchain.output_parsers import StructuredOutputParser, ResponseSchema


warnings.filterwarnings('ignore')  # —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ warnings
dotenv.load_dotenv()

llm = HuggingFaceEndpoint(
    repo_id='mistralai/Mistral-7B-Instruct-v0.3',
    temperature=0.3,
)
#1–ª–∞–Ω—Ü—é–≥
schemas1 = [
    ResponseSchema(name='—Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤', description='—Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤ –∑–≥—ñ–¥–Ω–æ –º–µ—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'),#–ü–µ—Ä—à–∏–π –ª–∞–Ω—Ü—é–≥ –æ—Ç—Ä–∏–º—É—î –º–µ—Ç—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è(—Å—Ö—É–¥–Ω–µ–Ω–Ω—è, –Ω–∞–±—ñ—Ä –º‚Äô—è–∑—ñ–≤, —Ç–æ—â–æ)
    ]
parser1 = StructuredOutputParser.from_response_schemas(schemas1)
format_instructions = parser1.get_format_instructions()

prompt1 = PromptTemplate.from_template("""
[INST]
–¢–∏ —Ñ—ñ—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è -—Å–∫–ª–∞—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –≤–ø—Ä–∞–≤ –∑–≥—ñ–¥–Ω–æ –º–µ—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.
–ú–µ—Ç–æ—é –º–æ–∂–µ –±—É—Ç–∏: —Å—Ö—É–¥–Ω–µ–Ω–Ω—è, –Ω–∞–±—ñ—Ä –º‚Äô—è–∑—ñ–≤, –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–¥–æ—Ä–æ–≤‚Äô—è, —Ç–æ—â–æ.
–ù–∞–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

[/INST]

[INST]
–ú–µ—Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:{–º–µ—Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è}
–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:{format_instructions}
–í—ñ–¥–ø–æ–≤—ñ–¥—å:

[/INST]

""",
    partial_variables={'format_instructions': format_instructions})

chain1 = prompt1 | llm | parser1

#–ª–∞–Ω—Ü—é–≥2

schemas2 = [
    ResponseSchema(name='–ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', description='–î–µ—Ç–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤'), #–î—Ä—É–≥–∏–π –æ—Ç—Ä–∏–º—É—î –æ—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤

    ]
parser2 = StructuredOutputParser.from_response_schemas(schemas2)
format_instructions = parser2.get_format_instructions()

prompt2 = PromptTemplate.from_template("""
[INST]
–¢–∏ —Ñ—ñ—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä.
–ù–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –≤–ø—Ä–∞–≤, —Ä—ñ–≤–Ω—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 
—Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–æ–¥–∏–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è , —Å—Ç–≤–æ—Ä–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.
–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—é —Ç–∞ —á—ñ—Ç–∫–æ—é.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –£–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.

[/INST]

[INST]
–°–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤:{—Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤}
–†—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏: {—Ä—ñ–≤–µ–Ω—å}
–ì–æ–¥–∏–Ω –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å: {–≥–æ–¥–∏–Ω}  –≥–æ–¥.
–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:{format_instructions}
–í—ñ–¥–ø–æ–≤—ñ–¥—å:

[/INST]

""",
    partial_variables={'format_instructions': format_instructions})

chain2 = prompt2| llm | parser2

user_input = input(" –î–ª—è —Ç–æ–≥–æ —â–æ–± —è —Å—Ç–≤–æ—Ä–∏–≤ –≤–∞—à —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è ( —Å—Ö—É–¥–Ω–µ–Ω–Ω—è, –Ω–∞–±—ñ—Ä –º'—è–∑—ñ–≤) :")


response1 = chain1.invoke({'–º–µ—Ç–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è': user_input})
print("üîπ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤:", response1)

# –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ª–∞–Ω—Ü—é–≥–∞
—Ä—ñ–≤–µ–Ω—å = input("–í–∞—à —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ (–Ω–∏–∑—å–∫–∏–π, —Å–µ—Ä–µ–¥–Ω—ñ–π, –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª): ")
–≥–æ–¥–∏–Ω–∏ = input("–°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω –≤–∏ –≥–æ—Ç–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å?: ")

response2 = chain2.invoke({
    '—Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤': response1['—Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤'],
    '—Ä—ñ–≤–µ–Ω—å': —Ä—ñ–≤–µ–Ω—å,
    '–≥–æ–¥–∏–Ω–∏': –≥–æ–¥–∏–Ω–∏
})
print("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:")
print(response2)
